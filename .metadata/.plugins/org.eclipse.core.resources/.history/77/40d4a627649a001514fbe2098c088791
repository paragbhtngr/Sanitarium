package display;

import java.io.File;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import entities.Potion;
import entities.creatures.FiringEnemy;
import entities.creatures.PatrolEnemy;
import entities.creatures.WanderingEnemy;
import game.Game;

public class XMLParser {

	static Game game;

	public static void saveToXML(Game game, String filename){
		System.out.println("SAVING IN SLOT "+filename);
		try {
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.newDocument();

			// root element
			Element rootElement = doc.createElement("map_elements");
			doc.appendChild(rootElement);

			// Store the player's stats and position
			Element player = doc.createElement("player");

			Attr gLevel = doc.createAttribute("game_level");			gLevel.setValue(Integer.toString(game.level));

			Attr name = doc.createAttribute("name"); 					name.setValue(game.p.getName());
			Attr gender = doc.createAttribute("gender"); 				gender.setValue(game.p.getGender());
			Attr age = doc.createAttribute("age");		 				age.setValue(Integer.toString(game.p.getAge()));

			Attr pLevel = doc.createAttribute("player_level"); 		pLevel.setValue(Integer.toString(game.p.getLevel()));
			Attr pXP = doc.createAttribute("player_XP");				pXP.setValue(Integer.toString(game.p.getXP()));

			Attr maxHealth = doc.createAttribute("max_health"); 		maxHealth.setValue(Integer.toString(game.p.getMaxHealth()));
			Attr health = doc.createAttribute("health");				health.setValue(Integer.toString(game.p.getHealth()));
			Attr attack = doc.createAttribute("attack");				attack.setValue(Integer.toString(game.p.getAttack()));
			Attr mana = doc.createAttribute("mana");					mana.setValue(Integer.toString(game.p.getMana()));
			Attr potions = doc.createAttribute("potions");				potions.setValue(Integer.toString(game.p.getPotions()));

			Attr playerX = doc.createAttribute("x_val");				playerX.setValue(Integer.toString((int)game.p.getX()));
			Attr playerY = doc.createAttribute("y_val");				playerY.setValue(Integer.toString((int)game.p.getY()));

			player.setAttributeNode(gLevel);
			player.setAttributeNode(name);
			player.setAttributeNode(gender);
			player.setAttributeNode(age);
			player.setAttributeNode(maxHealth);
			player.setAttributeNode(health);
			player.setAttributeNode(attack);
			player.setAttributeNode(mana);
			player.setAttributeNode(potions);
			player.setAttributeNode(playerX);
			player.setAttributeNode(playerY);
			rootElement.appendChild(player);
			//potion list
			Element potionList = doc.createElement("potion_list");
			
			//  potion element
			for(int i=0;i<game.potionList.size();i++){
				Element potion = doc.createElement("potion");
				potionList.appendChild(potion);

				// setting x and y values for potion
				Attr potionX = doc.createAttribute("x_val"); 			potionX.setValue(Integer.toString(game.potionList.get(i).getX()));
				Attr potionY = doc.createAttribute("y_val");			potionY.setValue(Integer.toString(game.potionList.get(i).getY()));

				potion.setAttributeNode(potionX);
				potion.setAttributeNode(potionY);	 
			}
			rootElement.appendChild(potionList);

			//patrol enemy list
			Element patrolList = doc.createElement("patrol_enemy_list");
			rootElement.appendChild(patrolList);
			//  patrol enemy element
			for(int i=0;i<game.patrolList.size();i++){
				Element patrol = doc.createElement("patrol_enemy");
				patrolList.appendChild(patrol);

				// setting attribute values for patrol enemy
				Attr patrolHealth = doc.createAttribute("health");		patrolHealth.setValue(Integer.toString(game.patrolList.get(i).getHealth()));
				Attr patrolDir = doc.createAttribute("is_LR");			patrolDir.setValue(Boolean.toString(game.patrolList.get(i).isLRPatrol()));
				Attr isPosDir = doc.createAttribute("is_pos_dir");		patrolDir.setValue(Boolean.toString(game.patrolList.get(i).isPosDir()));

				Attr patrolX = doc.createAttribute("x_val"); 			patrolX.setValue(Integer.toString((int)game.patrolList.get(i).getX()));
				Attr patrolY = doc.createAttribute("y_val");			patrolY.setValue(Integer.toString((int)game.patrolList.get(i).getY()));

				patrol.setAttributeNode(patrolHealth);
				patrol.setAttributeNode(patrolDir);
				patrol.setAttributeNode(patrolX);
				patrol.setAttributeNode(patrolY);	 
			}

			//wandering enemy list
			Element wanderList = doc.createElement("wandering_enemy_list");
			rootElement.appendChild(wanderList);
			//  wandering enemy element
			for(int i=0;i<game.wanderList.size();i++){
				Element wander = doc.createElement("wandering_enemy");
				wanderList.appendChild(wander);

				// setting attribute values for wandering enemy
				Attr wanderHealth = doc.createAttribute("health");		wanderHealth.setValue(Integer.toString(game.wanderList.get(i).getHealth()));	         
				Attr wanderX = doc.createAttribute("x_val"); 			wanderX.setValue(Integer.toString((int)game.wanderList.get(i).getX()));
				Attr wanderY = doc.createAttribute("y_val");			wanderY.setValue(Integer.toString((int)game.wanderList.get(i).getY()));

				wander.setAttributeNode(wanderHealth);
				wander.setAttributeNode(wanderX);
				wander.setAttributeNode(wanderY);	 
			}

			//firing enemy list
			Element firingList = doc.createElement("firing_enemy_list");
			rootElement.appendChild(firingList);
			//  firing enemy element
			for(int i=0;i<game.firingList.size();i++){
				Element firing = doc.createElement("firing_enemy");
				firingList.appendChild(firing);

				// setting attribute values for firing enemy
				Attr firingHealth = doc.createAttribute("health");		firingHealth.setValue(Integer.toString(game.firingList.get(i).getHealth()));
				Attr firingDir = doc.createAttribute("direction");		firingHealth.setValue(Integer.toString(game.firingList.get(i).getDir()));
				Attr firingX = doc.createAttribute("x_val"); 			firingX.setValue(Integer.toString((int)game.firingList.get(i).getX()));
				Attr firingY = doc.createAttribute("y_val");			firingY.setValue(Integer.toString((int)game.firingList.get(i).getY()));

				firing.setAttributeNode(firingHealth);
				firing.setAttributeNode(firingX);
				firing.setAttributeNode(firingY);	 
			}


			// write the content into xml file
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(doc);
			StreamResult result = new StreamResult(new File("./res/saves/"+filename+".xml"));
			transformer.transform(source, result);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void loadFromXML(Game _game, String filename){

		game = _game;

		try {	
			File inputFile = new File("./res/saves/"+filename+".xml");
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(inputFile);
			doc.getDocumentElement().normalize();

			// Create player
			NodeList pList = doc.getElementsByTagName("player");
			Node pNode = pList.item(0);
			if (pNode.getNodeType() == Node.ELEMENT_NODE) {
				Element eElement = (Element) pNode;
				game.level = Integer.parseInt(eElement.getAttribute("game_level"));
				// Player character attributes
				game.p.setName(eElement.getAttribute("name"));
				game.p.setGender(eElement.getAttribute("gender"));
				game.p.setAge(Integer.parseInt(eElement.getAttribute("age")));
				game.p.setLevel(Integer.parseInt(eElement.getAttribute("player_level")));
				game.p.setXP(Integer.parseInt(eElement.getAttribute("player_XP")));
				// Player game attributes
				game.p.setMaxHealth(Integer.parseInt(eElement.getAttribute("max_health")));
				game.p.setHealth(Integer.parseInt(eElement.getAttribute("health")));
				game.p.setAttack(Integer.parseInt(eElement.getAttribute("attack")));
				game.p.setMana(Integer.parseInt(eElement.getAttribute("mana")));
				game.p.setPotion(Integer.parseInt(eElement.getAttribute("potions")));
				// Player coordinates
				game.p.setX(Integer.parseInt(eElement.getAttribute("x_val")));
				game.p.setY(Integer.parseInt(eElement.getAttribute("y_val")));
			}

			// Create potion list for map
			NodeList nList = doc.getElementsByTagName("potion");
			for (int temp = 0; temp < nList.getLength(); temp++) {
				Node nNode = nList.item(temp);
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;
					game.potionList.add(new Potion(game, Integer.parseInt(eElement.getAttribute("x_val")), Integer.parseInt(eElement.getAttribute("y_val"))));
				}
			}

			// Create patrol enemy list for map
			nList = doc.getElementsByTagName("patrol_enemy");
			for (int temp = 0; temp < nList.getLength(); temp++) {
				Node nNode = nList.item(temp);
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;
					PatrolEnemy pe = new PatrolEnemy(game, Integer.parseInt(eElement.getAttribute("x_val")), Integer.parseInt(eElement.getAttribute("y_val")), Boolean.parseBoolean(eElement.getAttribute("is_LR")));
					pe.setIsPosDir(Boolean.parseBoolean(eElement.getAttribute("is_pos_dir")));
					pe.setHealth(Integer.parseInt(eElement.getAttribute("health")));

					game.patrolList.add(pe);
				}
			}
			// Create wandering enemy list for map
			nList = doc.getElementsByTagName("wandering_enemy");
			for (int temp = 0; temp < nList.getLength(); temp++) {
				Node nNode = nList.item(temp);
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;
					WanderingEnemy we = new WanderingEnemy(game, Integer.parseInt(eElement.getAttribute("x_val")), Integer.parseInt(eElement.getAttribute("y_val")));
					we.setHealth(Integer.parseInt(eElement.getAttribute("health")));

					game.wanderList.add(we);
				}
			}
			// Create firing enemy list for map
			nList = doc.getElementsByTagName("firing_enemy");
			for (int temp = 0; temp < nList.getLength(); temp++) {
				Node nNode = nList.item(temp);
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;
					FiringEnemy fe = new FiringEnemy(game, Integer.parseInt(eElement.getAttribute("x_val")), Integer.parseInt(eElement.getAttribute("y_val")));
					fe.setDir(Integer.parseInt(eElement.getAttribute("direction")));
					fe.setHealth(Integer.parseInt(eElement.getAttribute("health")));

					game.firingList.add(fe);
				}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
